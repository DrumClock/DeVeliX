# This file contains a configuration snippet for M218 
#
# See docs/Config_Reference.md for a description of parameters.

#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:
variable_hotend_offset: {  } 


# e.g. after _INIT_M218
# variable_hotend_offset: { 0 : { 'x': 0.0 , 'y': 0.0 , 'z': 0.0 } ,
#                           1 : { 'x': 0.0 , 'y': 0.0 , 'z': 0.0 }
#                          }  

#####################################################################
# Creating a list of variables from the 
# configuration after restarting FW Klipper 
#
#  Add gcode_macro _INIT_M218 to [delayed_gcode _INIT]:
#####################################################################
 
[gcode_macro _INIT_M218]   
description:   Restore hotend offset after restart from [save_variables] file.    
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %} 

   ### update the variable according to the number of extruders
   {% set new_hotend_offset = user_vars.hotend_offset %} 
   {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
       {% if 'extruder' in tool %} 
          {% set tool_nr = tool.lstrip("extruder") if tool.lstrip("extruder")|length != 0 else 0 %}  
               {% if user_vars.hotend_offset[tool_nr|int] is not defined %}
                 {% set _dummy =new_hotend_offset.update( { tool_nr|int : {'x': 0.0 , 'y': 0.0 , 'z': 0.0}} ) %}   
                 SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=hotend_offset  VALUE="{new_hotend_offset}" 
              {% endif %}   
          {% endif %}              
      {% endfor %}      

     {action_respond_info("Creating a list of variables for macro M218 ")}
  

     ### update the variable from [save_variables] file
     ### generate variable if needed
      {% if printer.save_variables.variables.hotend_offset is not defined %}
        {% set default = {'restore': False, 'change_T0': False} %}
         SAVE_VARIABLE VARIABLE=hotend_offset VALUE="{default}"
      {% else %}
     ### check if a restore is true
      {% if printer.save_variables.variables.hotend_offset.restore %}
         RESTORE_VARIABLE_HOTEND_OFFSET
      {% endif %}
    {% endif %} 
    

#####################################################################
# PRINTER Hotend offset MANAGEMENT
# Define G-code command  M218 
#####################################################################
#
# M218                    - view offset for all Hotends
# M221 T1                 - view offset for Hotends T1
# M221 T1 X50 Y0.5 Z0.01  - set offset for Hotend T1
#
#####################################################################

[gcode_macro M218]  
description:     Sets hotend offset (in mm): T<extruder_number>  X<offset_on_X>  Y<offset_on_Y>  Z<offset_on_Z>.   
gcode:

        {% set user_vars = printer["gcode_macro VARIABLE"] %} 
        {% set ns = namespace(key_in_params=false) %} 


     {% if params.T is not defined %} 
             ### view offset setting for all Hotends
                 {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
                      {% if 'extruder' in tool %} 
                        {% set tool_nr = tool.lstrip("extruder") if tool.lstrip("extruder")|length != 0 else 0 %}                             
                          {% set hotend_offset = user_vars.hotend_offset[tool_nr|int] %}                        
                          { action_respond_info("Hotend offset T%s is: ( X %s / Y %s / Z %s ) " % (tool_nr, hotend_offset.x, hotend_offset.y, hotend_offset.z)) }
                    {% endif %}              
                 {% endfor %}              
     {% else %}       

         {% set target_tool = params.T|default(0)|int %} 

         {% if user_vars.default_t_extruder|length  <  target_tool + 1  %}
           {action_respond_info("The tool T%s is not defined for Hotend or extruder." % (params.T)) } 
         {% else %}
        
              {% if target_tool == 0  and  printer.save_variables.variables.hotend_offset.change_T0 == False  %}
                 {action_respond_info("The tool T0 is not defined for change offset." )} 
              {% else %}
         
                      
                ### save and set XYZ offset  
                {% set new_hotend_offset = user_vars.hotend_offset %} 
              
                {% for key in params %}
                   {% if key in [ 'X' ,'Y', 'Z' ] %} 
                         {% set ns.key_in_params = true %} 
                         {% set value_offset =  params[key] %}
                                  
                       ### save offset to variable
                       {% set _dummy =new_hotend_offset[target_tool].update( { key|lower : value_offset|float }) %}                             
                         SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=hotend_offset  VALUE="{new_hotend_offset}"   
                                
                          ### apply offset if Hotend is active
                           {% set act_extruder = printer['toolhead'].extruder %}
                           {% set act_extruder_nr = act_extruder.lstrip("extruder") if act_extruder.lstrip("extruder")|length != 0 else 0 %}       
                              {% if act_extruder_nr|int == target_tool|int %}
                                 {action_respond_info ("SET_GCODE_OFFSET  %s=%s MOVE=1 " % (key, value_offset))}    
                                 SET_GCODE_OFFSET {key}={value_offset} MOVE=1  MOVE_SPEED=500 
                              {% endif %}
                    {% endif %}
                {% endfor %} 
            {% endif %}                
    
    ### view setting for Hotends Tx
               {% if ns.key_in_params == false %}                                         
                    {% set hotend_offset = user_vars.hotend_offset[target_tool|int] %}                        
                    {action_respond_info("Hotend offset T%s is: ( X %s / Y %s / Z %s ) " % (target_tool, hotend_offset.x, hotend_offset.y, hotend_offset.z))}
               {% endif %}
          {% endif %}          
      {% endif %}
        
       
  
#####################################################################

[gcode_macro SAVE_VARIABLE_HOTEND_OFFSET]
description: 
gcode: 

  # define the variable if needed
  {% if printer.save_variables.variables.hotend_offset is not defined %}
    {% set default = {'restore': False, 'change_T0': False} %}
    SAVE_VARIABLE VARIABLE=hotend_offset VALUE="{default}"
  {% endif %} 
 
  {% set recovery = printer.save_variables.variables.hotend_offset %}
  {% set _dummy = recovery.update({'restore': True,}) %}
  
  {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
    {% if 'extruder' in tool %} 
      {% set tool_txt = tool.lstrip("extruder") if tool.lstrip("extruder")|length != 0 else 0 %}   

     {% set user_vars = printer["gcode_macro VARIABLE"] %} 
     
      {% if recovery.offset is not defined %}
        {% set _dummy = recovery.update({'offset': [{'tool': tool_txt|int,      
                                      'x': user_vars.hotend_offset[tool_txt|int].x,
                                      'y': user_vars.hotend_offset[tool_txt|int].y,
                                      'z': user_vars.hotend_offset[tool_txt|int].z
                                      }]}) %}
         {action_respond_info("offset is not defined")}   
      {% else %}
         {% set ns = namespace(tool_update=false) %}
         {% for toolhead in recovery.offset %} ; loop thrue all stored tools            
           {% if toolhead.tool == tool_txt|int %}   
             {% set _dummy = recovery.offset[loop.index0].update({'tool': tool_txt|int,                                         
                                                'x': user_vars.hotend_offset[tool_txt|int].x,
                                                'y': user_vars.hotend_offset[tool_txt|int].y,
                                                'z': user_vars.hotend_offset[tool_txt|int].z}) %} 
            {% set ns.tool_update = true %}  
               {action_respond_info("recovery.offset.update ")}

           {% elif loop.last %}   ; tool was not found add it to the list               
            {% if ns.tool_update == false %}
              {% set _dummy = recovery.offset.append({'tool': tool_txt|int,                                    
                                         'x': user_vars.hotend_offset[tool_txt|int].x,
                                         'y': user_vars.hotend_offset[tool_txt|int].y,
                                         'z': user_vars.hotend_offset[tool_txt|int].z}) %}         
              
              {action_respond_info("recovery.offset.append")} 

             {% else %}
              {% set ns.tool_update = false %}               
             {% endif %}
           {% endif %}          
         {% endfor %}
      {% endif %}       
    {% endif %}
  {% endfor %} 
  ###  save multi tool offset
  SAVE_VARIABLE VARIABLE=hotend_offset VALUE="{recovery}"
  

#####################################################################

[gcode_macro RESTORE_VARIABLE_HOTEND_OFFSET]
description: 
gcode: 
  {% set user_vars = printer["gcode_macro VARIABLE"] %} 
  {% set recovery = printer.save_variables.variables.hotend_offset %}
  {% set new_offset = user_vars.hotend_offset %} 
  
  {% for tool in recovery.offset|sort(attribute='tool') %}      
 
    {% set _dummy =new_offset.update( {tool.tool|int : { 'x': tool.x,
                                                         'y': tool.y,
                                                         'z': tool.z}} ) %}   
                                                                                                                  
       SET_GCODE_VARIABLE  MACRO=VARIABLE  VARIABLE=hotend_offset  VALUE="{new_offset}" 
   
       {action_respond_info("Restore Hotend offset T%s from SD card. ( X %s / Y %s / Z %s ) " % (tool.tool, tool.x, tool.y, tool.z))}          

   {% endfor %} 

      



     