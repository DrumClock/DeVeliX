# This file contains a configuration snippet for Oozing prevent.
#
#
#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_oozing_prevent: { }      # e.g. 'diff_temp'{ 'extruder': 10.0, 'extruder1': 15.0 }
                                  #      'menu':'extruder'
                                  #      'enable': false

#############################################################
# Creating a list of variables from the printer configuration
# using [gcode_macro RUN_MACRO_INIT] which will run
# in [delayed_gcode _INIT] after restarting FW Klipper.
#
# This macro finds all defined _INIT_* macros and runs them.
# The start order can be defined by names: _A_INIT_* , _B_INIT_* etc.
#############################################################

[gcode_macro _INIT_OOZING_PREVENT_PARAM]   
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %} 
 
 {% if user_vars.tool|length > 1 %}
 
      {% set name = "oozing_prevent" %}     # name variable     
      {% set init = { 'enable':false }  %}  # load act preset  
   
      ### init 'diff_temp' for extruder
      {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
           {% if 'extruder' in tool %} 
               ### define difference temperature
              {% set _dummy = init.update({ 'diff_temp': { tool:20.0 }})  if init.diff_temp is not defined  else  init.diff_temp.update({ tool:20.0 }) %}    
          {% endif %}
      {% endfor %}
      
      
       ### init variable for LCD menu 
      {% if printer.configfile.settings['menu __main __user __oozing'] is defined  %}  
         {% set _dummy =  init.update( { 'menu': 'extruder'} ) %}
     {% endif %} 

     {action_respond_info("Creating a list of variables for tool oozing param ") if printer.save_variables.variables.dump_list}

       
       ## update variable "oozing_prevent"
       SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE={name} VALUE="{init}"
     
     {% endif %}  

   
# ########################################################################## 
# ##                    OOZING PREVENT MANAGMENT                         ###
# ########################################################################## 
#
#
# for Slicer: 
#
# add start G-code: ( to end of block )
#  SET_OOZING_PREVENT  ENABLE=1
#
# add end G-code: (to beginning of block)
#  SET_OOZING_PREVENT  ENABLE=0
#
#
# ##########################################################################
   
[gcode_macro ACTIVATE_OOZING_PREVENT]
description: ACTIVATE_OOZING_PREVENT  COOLING=extruder  HEATING=extruder1   WAIT=False
gcode:

    ###  params COOLING / HEATING =[extruder|extruder1|extruder2|...] 
    ###  params WAIT=  False / True
    
     {% set user_vars = printer["gcode_macro VARIABLE"] %}

  {% if user_vars.oozing_prevent.enable|lower == 'true' %}      
     {action_respond_info("Activate oozing prevent extruder.")}             
  
      {% set wait = params.WAIT|default('False')%}
    
### ------------------------------------  cooling extruder     -----------------------------------------

  {% if 'COOLING' in params %}
      
	  {% set cool_extruder = params.COOLING|lower %}	  
      {% set cool_temp = (printer[cool_extruder].temperature - user_vars.oozing_prevent.diff_temp[cool_extruder])|int %}

        {% if printer[cool_extruder].can_extrude | lower == 'true'  %}  ;  only when heated extruder
           {action_respond_info("Cooling %s - %s to %s " % (  cool_extruder, printer[cool_extruder].temperature, cool_temp) )} 
           
          {% if wait == 'True' and cool_temp !=0  %} 
             SET_HEATER_TEMPERATURE HEATER="{cool_extruder}" TARGET={cool_temp}      ;    eg. 235  - 15
			 TEMPERATURE_WAIT SENSOR="{cool_extruder}" MINIMUM={cool_temp - 2.0} MAXIMUM={cool_temp + 2.0}
           {% else %}               		 
			 SET_HEATER_TEMPERATURE HEATER="{cool_extruder}" TARGET={cool_temp} 
          {% endif %}  
          
        {% endif %} 		  
		  
   {% endif %}  
   
 ###  --------------------------------------- heating extruder    -------------------------------------

   {% if 'HEATING' in params %}
   
      {% set heat_extruder = params.HEATING|lower %}            
      {% set heat_temp = (printer[heat_extruder].temperature + user_vars.oozing_prevent.diff_temp[heat_extruder])|int %}
      
         {% if printer[heat_extruder].can_extrude | lower == 'true'  %}  ; only when heated extruder
              {action_respond_info("Heating %s - %s to %s " % (  heat_extruder, printer[heat_extruder].temperature, heat_temp) )}
              
          {% if wait == 'True' and heat_temp !=0  %} 
		    SET_HEATER_TEMPERATURE HEATER="{heat_extruder}" TARGET={heat_temp}      ;  eg. 225  + 10   
			TEMPERATURE_WAIT SENSOR="{heat_extruder}" MINIMUM={heat_temp - 2.0} MAXIMUM={heat_temp + 2.0}                 
          {% else %}   
             SET_HEATER_TEMPERATURE HEATER="{heat_extruder}" TARGET={heat_temp}
          {% endif %}
          
         {% endif %} 
		 
    {% endif %} 
    
### -------------------------------------------------------------------------------------------------------

  {% else %}
      {action_respond_info("Oozing prevent is disabled.")} 
  {% endif %}

##########################################################################
[gcode_macro SET_OOZING_PREVENT]
description: SET_OOZING_PREVENT ENABLE=[0|1]
gcode:
      
    {% set user_vars = printer["gcode_macro VARIABLE"] %}   
     {% set name = "oozing_prevent" %}       # name variable 
     {% set init = user_vars[name] %}  
     
    {% if 'gcode_macro ACTIVATE_OOZING_PREVENT' in  printer  and  user_vars.tool|length > 1  %}

      ### ENABLE=1 ...cooling / ENABLE=0 ...heating  -> for all inactive extruders
      {% set enable=params.ENABLE if params.ENABLE is defined else 2 %} 

      ### check command for oozing prevent 
       {% if  enable  not  in ['0','1'] %}
          {action_respond_info(" Invalid ENABLE parameter.")} 

      {% elif user_vars.oozing_prevent.enable|lower == 'false' and enable|int != 1 %}
          {action_respond_info("Oozing prevent is disabled.")} 

      {% elif user_vars.oozing_prevent.enable|lower == 'true' and enable|int != 0 %}
          {action_respond_info("Oozing prevent is already active.")} 

      {% else %}
          ### mode ... -1 = cooling / 1 = heating / 0 = ignore temp inactive extruders                
          {% set mode_map = {0: 1, 1:-1} %}
          {% set mode = mode_map.get(enable|int, 0) %}  #mode  = 1 | -1 | 0    

          ###  check for all available heaters 
          {% for tool in printer.heaters.available_heaters|sort %}    
             {% if 'extruder' in tool  !=  printer.toolhead.extruder %}  

              ### safety calc for 'min_extrude_temp'
               {% if  ((printer[tool].target + (user_vars.oozing_prevent.diff_temp[tool] *  mode))|int)  >=  ((printer.configfile.config[tool].min_extrude_temp)|int)  %}   
                {% set  _temp = (printer[tool].target + (user_vars.oozing_prevent.diff_temp[tool] *  mode))|int  %}
                {% set  _tool = tool.lstrip("extruder") if  tool.lstrip("extruder")|length != 0 else 0 %}
                   M104 S{_temp}  T{_tool} 
               {% endif %}    

            {% endif %}   
          {% endfor %}    

         ### update variable 'oozing_prevent'
          {% set _dummy = init.update( { 'enable': False  if enable|int == 0 else  True } ) %} 
            SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE={name} VALUE="{init}" 
        
      {% endif %}
    {% endif %}
            
################################################################################
# This macro allows the user to change the value in  'variable_oozing_prevent'
################################################################################

[gcode_macro SET_OOZING_PARAM]
description:  SET_OOZING_PARAM    EXTRUDER=extruder  DIFF_TEMP=10
gcode:
  
      {% set user_vars = printer["gcode_macro VARIABLE"] %}    
      {% set name = 'oozing_prevent' %}   
      {% set init = user_vars.oozing_prevent   %}     						                         
     
   {% for key in params %}       
          
         {% if key|lower =='extruder' %} 
             {% set extruder = params[key]|default('extruder')  %}
               
             {% if  params.DIFF_TEMP is defined  and extruder in  init.diff_temp %}             
                {% set _dummy = init.diff_temp.update( {extruder : params.DIFF_TEMP|int} )  %}
             {% endif%}    
  
         {% endif %}  
    {% endfor %}   
  
       ### update variable 'oozing_prevent'   
       SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE={name}  VALUE="{init}"  

     # {action_respond_info("variable_%s : %s" % (name,init))}
  
       
        
               
               