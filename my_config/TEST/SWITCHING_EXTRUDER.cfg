# This file contains a configuration snippet for SWITCHING EXTRUDER 
#
# See docs/Config_Reference.md for a description of parameters.

#####################################################################
#  add HW config printer for dual-carriage ...
#####################################################################
# 
# [extruder]          - full definition
# [extruder1]         - without stepper definition
# [servo tool_1]      - servo for switching extruder
#
#

#####################################################################
# All variables in this configuration, KLIPPER merges
# into one configuration  file [gcode_macro VARIABLE] .
#
# ATTENTION:
# If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
gcode:

variable_switching_extruder: { }   # do not edit !  
variable_switching_servo: { }      # do not edit ! 

# example after _INIT_SWITCHING_EXTRUDER :
#
# switching_extruder =  {'extruder1' : 'extruder' }  
# switching_servo =  { 'extruder' : {'index': 0 , 'angle': 45,  'delay' :600 , 'off':  False },
#                      'extruder1': {'index': 0 , 'angle': 135, 'delay' :600 , 'off':  False },
#                      'turn_off' : { 0: False } , 'name' : { 0: 'cfg-name' }
#                     }                                                              

##########################################################
# Creating a list of variables from the 
# configuration after restarting FW Klipper 
#
#  Add _INIT_xxx to [delayed_gcode _INIT]:
##########################################################
 
[gcode_macro _INIT_SWITCHING_EXTRUDER]          
gcode:

   {% set user_vars = printer["gcode_macro VARIABLE"] %} 

  ### update variable switching_extruder { } by configuration of printer  
  {% set switching_extruder = user_vars.switching_extruder %}

   {% for tool in printer.motion_report.steppers |sort %} 
      {% if 'extruder' in tool    %} 
         {% set  tool_name =  tool     %}      
         {% set  carriage = 0 if tool_name in user_vars.default_carriage_tool[0] else 1  %}
            {% for extruder in user_vars.default_carriage_tool[carriage]|sort %}  
              {% if tool_name !=  extruder  %}
                 {% set sync_ex =  extruder  %}
                 {% set _dummy = switching_extruder.update( { sync_ex : tool_name  } )     %}                
              {% endif %}
           {% endfor %}
       {% endif %}
   {% endfor %}      

   ### update switching_servo variable by configuration of printer    
   {% set switching_servo= user_vars.switching_servo %}

   ### update  { 'name' and 'turn_off' }
    {% set ns = namespace(index=0|int) %}
    {% set _dummy = switching_servo.update( { 'name': { } }) %}
    {% set _dummy = switching_servo.update( { 'turn_off': { } }) %}

    {% for object in printer.configfile.config|sort %}        
       {% if 'servo ' is in object  %}             
          {% if object.split(' ')[0] == 'servo' %} 
            {% set _dummy = switching_servo.name.update( { ns.index : (object.split(' ')[1])} ) %}
            {% set _dummy = switching_servo.turn_off.update( { ns.index : False } ) %}
            {% set ns.index =  ns.index + 1 %}  
         {% endif %}
     {% endif %} 
   {% endfor %}     
     
  # update { 'extruder' } by configuration of default_carriage_tool variable   
   {% for index in user_vars.default_carriage_tool|sort %}  
      {% for tool in user_vars.default_carriage_tool[index] %}
       {% set angle = 60 if loop.index0 == 0 else 160 %}    # 45 / 135
        {% set _dummy = switching_servo.update( { tool: {'index': index ,'angle': angle|int,  'delay' :200 , 'off':  False }} ) %}       
       {% endfor %}
   {% endfor %}

   ### update variables
   SET_GCODE_VARIABLE MACRO=VARIABLE   VARIABLE=switching_extruder  VALUE="{switching_extruder}"  
   SET_GCODE_VARIABLE MACRO=VARIABLE   VARIABLE=switching_servo     VALUE="{switching_servo}"

    {action_respond_info("Creating a list of variables for macro SWITCHING_EXTRUDER" )}     
 
  
#####################################################################
# PRINTER SWITCHING EXTRUDER MANAGEMENT
# Function description: One stepper motor to move two filaments.
#####################################################################

[gcode_macro SWITCHING_EXTRUDER]
description: Set : SWITCHING_EXTRUDER  E=(name)
gcode:
       # {action_respond_info(">>>> run gcode_macro  SWITCHING_EXTRUDER E= %s " % (tool_name))}  

        ### params.E = ['extruder'| 'extruder1'| 'extruder2'| 'extruder3']
         {% set user_vars = printer["gcode_macro VARIABLE"] %}
         {% set tool_name = params.E %}      
         {% set tool_nr = tool_name.lstrip("extruder")|int if tool_name.lstrip("extruder")|length != 0 else 0 %}
       
         {% set default_extruder = tool_name %}
         {% set sync_extruder =  tool_name %}
         {% set rotation = 1 %}
         {% set extrude_factor = 1.0 %}           
         
         ### set swiching extruder 
           {%  if  tool_name  is not in   printer.motion_report.steppers %}             
              {% set sync_extruder =  user_vars.switching_extruder[tool_name] %} 
              {% set rotation = -1 %}                
           {% endif %}

         ### if define macro M221 - set extrude factor for "default_extruder"
           {% if printer['gcode_macro M221'] is defined %}  
             {% set extrude_factor = printer['gcode_macro VARIABLE'].extrude_factor[default_extruder]  %}
           {% endif %}
        
         ### seingst extruder 
         {% set dafault_rotation = printer.configfile.settings[sync_extruder].rotation_distance *  rotation %}
         {% set dafault_pressure = printer.configfile.settings[sync_extruder].pressure_advance %}
         {% set dafault_smoothti = printer.configfile.settings[sync_extruder].pressure_advance_smooth_time  %} 
            
         SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER={sync_extruder} DISTANCE={dafault_rotation / extrude_factor }
         SYNC_EXTRUDER_MOTION EXTRUDER={sync_extruder} MOTION_QUEUE={default_extruder}
         SET_PRESSURE_ADVANCE EXTRUDER={sync_extruder} ADVANCE={dafault_pressure} SMOOTH_TIME={dafault_smoothti}

         ### save actual rotation distance for active extruder
#         {% set _dummy = user_vars.act_rotation_distance.update({default_extruder: (dafault_rotation / extrude_factor)|round(3)}) %}
#         SET_GCODE_VARIABLE MACRO=VARIABLE   VARIABLE=act_rotation_distance  VALUE="{user_vars.act_rotation_distance}"   
         
         ### --- set switching extruder servo ---- 
 
         {% set index = user_vars.switching_servo[tool_name].index %} 
         {% set name =  user_vars.switching_servo.name[index] %} 
         {% set angle = user_vars.switching_servo[tool_name].angle %}
            SET_SERVO SERVO={name} angle={angle}
             G4 P{user_vars.switching_servo[tool_name].delay} 

          ### update info "angle" variable.servo  for M280
         {% if printer['gcode_macro M280'] is defined %}  
           {% set var_servo = user_vars.servo %}
           {% set _dummy = var_servo.angle.update( { index|int : angle } ) %} 
           SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=servo VALUE="{var_servo}"
         {% endif %}  
 
           ### turn off the servos after 15 seconds   
         {% if user_vars.switching_servo[tool_name].off  %}            
            ### update info "turn_off" variable       
             {% set servo = user_vars.switching_servo %} 
             {% set _dummy =servo.turn_off.update( {index|int: True}  ) %}
               SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=switching_servo  VALUE="{servo}"             
               UPDATE_DELAYED_GCODE ID=SERVO_OFF  DURATION=15              
           {% endif %}   

         ### if the extruder is not activated
         {% if printer.toolhead.extruder != tool_name %}       
            ACTIVATE_EXTRUDER EXTRUDER={tool_name}
            SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=active_tool VALUE={tool_nr}
         {% endif %}

#####################################################################
####   TURN SERVO_OFF  - delayed_gcode 
#####################################################################

[delayed_gcode SERVO_OFF]
initial_duration: 0.0
gcode:
   
   {% set user_vars = printer["gcode_macro VARIABLE"] %}
      
     ### switching servo OFF   
   {% for count in range(0, user_vars.switching_servo.turn_off|length)  %}  
      {% if  user_vars.switching_servo.turn_off[count] %}
          {% set servo_name =  user_vars.switching_servo.name[count] %}   
             SET_SERVO SERVO={servo_name}   WIDTH=0    
           {action_respond_info("Switching servo %s turn off" % (servo_name))}    
          
          ### update info "turn_off" variable       
             {% set servo = user_vars.switching_servo %} 
             {% set _dummy =servo.turn_off.update( {count|int: False}  ) %}
               SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=switching_servo  VALUE="{servo}"          
        {% endif %}                   
   {% endfor %}

 
 