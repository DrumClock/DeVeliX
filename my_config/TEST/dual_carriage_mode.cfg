# This file contains a configuration snippet for a dual extruder
# printer using dual carriages (an "IDEX" printer).
#
# The files "cartesian.py" and "idex_modes.py" by Tircown.

#####################################################################
#  add HW config printer for dual-carriage ...
#####################################################################
# [dual_carriage]
# [tmc2209 dual_carriage]
# [extruder1]
# [tmc2209 extruder1]
# [fan_generic fan]   - carriage 0 print cooling fan
# [fan_generic fan1]  - carriage 1 print cooling fan

#####################################################################
#  Variable for this configurations
#  ATTENTION: 
#  KLIPPER merges all [gcode_macro VARIABLE] into one configuration file.
#  If the variable name already exists it will be overwritten!
#####################################################################

[gcode_macro VARIABLE]
description: HELP: for list of variables send DUMP_MACRO_GCODE
gcode:

#--- Auto_park parameters ---
variable_z_hop: 4.0
variable_autopark_movespeed: 500
variable_autopark_feedrate: 30000

### ! Do not edit variable below this line !  ###
#-----------------------------------------------#
variable_auto_park: 1 # do not edit
variable_active_tool: 0 # do not edit
variable_active_carriage: 0 # do not edit
variable_z_restore: 0 # do not edit
variable_print_offset_z: 0 # do not edit

variable_default_t_extruder: { 0: 'extruder', 1: 'extruder1' }            # default
variable_default_carriage_tool : { 0: ['extruder'], 1: ['extruder1'] }    # default
variable_hotend_offset: { 0 : { 'x': 0.0 , 'y': 0.0 , 'z': 0.0 } ,
                          1 : { 'x': -10.0 , 'y': 0.0 , 'z': 0.0 }
                          }   


 
 #####################################################################
# Creating a list of variables from the 
# configuration after restarting FW Klipper 
#
#  Add macro _INIT_xxx to [delayed_gcode _INIT].
#####################################################################

[gcode_macro _INIT_DEFAULT_T_EXTRUDER]
gcode:
  {% set user_vars = printer["gcode_macro VARIABLE"] %}

 ### init defautl T for extruder
  {% set default_t_extruder = {} %}
  {% for tool in printer.heaters.available_heaters|sort %} ; check for all available heaters
    {% if 'extruder' in tool %}      
      {% set tool_nr = tool.lstrip("extruder") if tool.lstrip("extruder")|length != 0 else 0 %}
      {% set _dummy = default_t_extruder.update({tool_nr|int: tool}) %}                    
    {% endif %}
  {% endfor %}
  
    SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=default_t_extruder VALUE="{default_t_extruder}"     

   {action_respond_info("Creating a list of variables for %s extruder" % (default_t_extruder|length))}   

# --------------------------------------------------------------------

[gcode_macro _INIT_DEFAULT_CARRIAGE_TOOL]
gcode:

  {% set user_vars = printer["gcode_macro VARIABLE"] %} 
   {% set default_carriage_tool = user_vars.default_carriage_tool %}
  
  {% if printer['dual_carriage'] is defined %}
    ### setting for dual-carriage config 
       {% if user_vars.default_t_extruder |length == 2 %}   
           ### default settings in variable
       {% elif user_vars.default_t_extruder |length == 3 %}       ##  2 carriage  / 3 extruder
            ### set extruders for carriage 0  ( extruder + extruder1)              
               {% set _dummy = default_carriage_tool[0].append('extruder1')  %}
            ### set extruders for carriage 1  ( extruder2 )    
               {% set _dummy = default_carriage_tool.update( {1: ['extruder2']} ) %}
     
           {action_respond_info("Creating a list of variables for 3 extruder on 2 carriages." )}     
            
       {% elif user_vars.default_t_extruder |length == 4 %}          ##  2 carriage  / 4 extruder
           ### set extruders for carriage 0  ( extruder + extruder1) 
                {% set _dummy = default_carriage_tool[0].append('extruder1')  %}
            ### set extruders for carriage 1  ( extruder2 + extruder3) 
               {% set _dummy = default_carriage_tool.update( {1: ['extruder2']} ) %}
               {% set _dummy = default_carriage_tool[1].append('extruder3') %}  

           {action_respond_info("Creating a list of variables for 4 extruder on 2 carriages. ")}     
            
       {% else %}    
            {action_respond_info("Configuration of %s not valid for dual-carriage mode." % user_vars.default_t_extruder)}
       {% endif%}    
     
  {% else %}   
    ### setting for dual-extruder config
       {% if user_vars.default_t_extruder |length == 2 %}        ##  1 carriage  / 2 extruder
            ### set dual-extruder for 1-carriage ( carriage 0 = extruder + extruder1)
               {% set _dummy = default_carriage_tool[0].append('extruder1')  %}
           ### delete carriage 1   
               {% set _dummy = default_carriage_tool.pop(1)  %}     
  
             {action_respond_info("Creating of variables for 2 extruder on 1 carriage.")} 
                SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=auto_park VALUE=0
       {% else %}               
             {action_respond_info("Configuration of %s not valid for multi-tool mode." % user_vars.default_t_extruder)}
       {% endif %}   
 {% endif %}
 
       ### save variable 
       SET_GCODE_VARIABLE MACRO=VARIABLE  VARIABLE=default_carriage_tool  VALUE="{default_carriage_tool}"



#####################################################################
# SETTINGS TOOL / EXTRUDER / CARRIAGE - MANAGEMENT
# Function description: 
#####################################################################

[gcode_macro T0]
gcode: 
  # SETTINGS_TOOL T=0
  TOOL_CHANGE_T0
          
[gcode_macro T1]
gcode: 
  # SETTINGS_TOOL T=1
  TOOL_CHANGE_T1
          
[gcode_macro T2]
gcode: 
  SETTINGS_TOOL T=2
          
[gcode_macro T3]
gcode: 
  SETTINGS_TOOL T=3     

          
#################   SETTINGS_TOOL  ####################################

[gcode_macro  SETTINGS_TOOL]
description: Activate the tool by index T=.
gcode:

    #{action_respond_info(">>>>> run gcode_macro  SETTINGS_TOOL")}
    ### params.T = [0|1|2|3]
        
    {% set user_vars = printer["gcode_macro VARIABLE"] %}
    {% set target_tool = params.T|default(0)|int %}


 {% if user_vars.default_t_extruder |length  <  target_tool + 1 %}
    ### ignore G-code Tx command if not defined [extruder]
       {action_respond_info("The tool T%s is not defined for extruder." % (target_tool))} 

 {% else %} 
   ### define tool for G-code Txx
      {% set tool_name = user_vars.default_t_extruder[target_tool]|string %}
      {% set tool_nr = tool_name.lstrip("extruder")|int if tool_name.lstrip("extruder")|length != 0 else 0 %}
      {% set default_carriage = 0 if tool_name in user_vars.default_carriage_tool[0] else 1 %}
      
      # {action_respond_info(" target_tool: %s \n tool_name: %s \n tool_nr: %s \n default_carriage: %s" % ( target_tool,tool_name,tool_nr,default_carriage))}       
     
  ### Settings default tool     
    {% if printer.dual_carriage is defined and printer.dual_carriage.mode != 'FULL_CONTROL' %}
   
#>>>  
        ### set dual-extruder in DUPLICATION or MIRRORED modes (4EX2 printer)
        {% if user_vars.default_t_extruder|length == 4 and target_tool in [0,1] and printer['gcode_macro SYNC_SWITCHING_TOOL'] is defined %}  
              M400 
              ### z-hop before action toolhead
              Z_HOP_TOOL
              ### synchronized switching for 4 hotends                          
              SYNC_SWITCHING_TOOL T={target_tool}
        {% else %}        
                  ### ignore command Tx in DUPLICATION and MIRRORED modes 
                   {action_respond_info("Ignore command T%s in DUPLICATION and MIRRORED modes." % target_tool)}     
        {% endif %}
#>>> 
 
#   ### ignore Tx command in DUPLICATION and MIRRORED modes
#  {action_respond_info("Ignore command T%s in DUPLICATION and MIRRORED modes." % target_tool)}                


    {% elif printer.toolhead.extruder != tool_name %}
           {action_respond_info("Tool T%s will now be set for %s." % (target_tool,tool_name))} 
            M400 
            ### SAVE actual prtin z-offset for all extruders            
            SAVE_PRINT_OFFSET_Z
            
            ### z-hop before action toolhead
            Z_HOP_TOOL          
        
            ### parking the active carriage to endstop position      
            {% if user_vars.auto_park and user_vars.active_carriage != default_carriage %}             
                    PARK_CARRIAGE            
            {% endif %}
         
 # -------- ACTIVATE_CARRIAGE + ACTIVATE_HOTEND ---------        
 
            ### tool activation
            ACTIVATE_EXTRUDER EXTRUDER={tool_name}
            SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=active_tool VALUE={tool_nr}
          
           ### Switching extruder 
            {% if printer['gcode_macro SWITCHING_EXTRUDER'] is defined %}                 
              SWITCHING_EXTRUDER E={tool_name}
            {% endif %}   
           
            ### set carriage    
           {% if printer.dual_carriage is defined  %}
            SET_DUAL_CARRIAGE CARRIAGE={default_carriage}
            SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=active_carriage VALUE={default_carriage}
          {% endif %}      
  # -----------------------------------------------------              
 
            ### restore position
                {% if user_vars.auto_park and user_vars.active_carriage != default_carriage %}                       
                       CHANGE_CARRIAGE C={default_carriage}                                
                {% endif %}   
      
             APPLY_OFFSETS_TOOL  T={tool_nr}
         
            ### switch CARRIAGE Print cooling fan
                {% if printer.dual_carriage is defined  %}
                    CARRIAGE_PRINT_FAN    
                {% endif %}   
             
            ### restore z-hop if not printing       
                    RESTORE_Z_HOP  
      {% else %}
            {action_respond_info("The tool T%s is already active for %s." % (target_tool,user_vars.default_t_extruder[target_tool]))}               
    {% endif %}
 {% endif %}

#############  APPLY_OFFSETS_TOOL  ###########################

[gcode_macro APPLY_OFFSETS_TOOL]
description: Apply Offsets HotEnd (tool) by params T.
gcode:
  #{action_respond_info(">>>>> run gcode_macro  APPLY_OFFSETS_TOOL")}
   ### params.T = [0|1|2|3]
   
  {% set user_vars = printer["gcode_macro VARIABLE"] %}
 
 ##### Apply Offsets #####   
   {% set target_tool = params.T|default(user_vars.active_tool)|int %}    
   {% set offset =  user_vars.hotend_offset[target_tool] %}   

  {% if printer['virtual_sdcard'].is_active != true %}   
     SET_GCODE_OFFSET X={offset.x} Y={offset.y} Z={offset.z  + user_vars.print_offset_z} MOVE=1 MOVE_SPEED=500     # MOVE_SPEED={user_vars.autopark_movespeed}
   {% else %}
     SET_GCODE_OFFSET X={offset.x} Y={offset.y} Z={offset.z  + user_vars.print_offset_z} MOVE_SPEED=500     # MOVE_SPEED={user_vars.autopark_movespeed}
   {% endif %}


############ PARK_CARRIAGE #############################

[gcode_macro PARK_CARRIAGE]
description: Park the active toolhead.
gcode:
 #{action_respond_info(">>>>> run gcode_macro  PARK_CARRIAG")}
    {% set user_vars = printer["gcode_macro VARIABLE"] %}       
    SAVE_GCODE_STATE name=park_carriage
    SET_GCODE_OFFSET X=0 Y=0 Z=0	
    
    ### parking the active carriage to endstop position according to the "axis" configuration in [dual_cariage]
    {% set axis = printer.configfile.settings.dual_carriage.axis %}  
  
    {% set stepper = ('stepper_'+axis,'dual_carriage')[user_vars.active_carriage] %}
    G1 {axis + (printer.configfile.config[(stepper)].position_endstop)} F{user_vars.autopark_feedrate}  

########### Z_HOP_TOOL ############################## 

[gcode_macro Z_HOP_TOOL]
description: z-hop before action toolhead
gcode:
  # {action_respond_info(">>>>> run gcode_macro  Z_HOP_TOOL")}
     {% set user_vars = printer["gcode_macro VARIABLE"] %}	
     {% set z_hop_tool = params.Z|default(user_vars.z_hop)|float %}     
     {% if z_hop_tool > 0.0 %}
       {% set max_z = printer.toolhead.axis_maximum.z|float %}
       {% set cur_z = printer.toolhead.position.z|float %}
       {% set z_safe = z_hop_tool if cur_z < (max_z - z_hop_tool) else (max_z - cur_z) %}       
       G91
       G1 Z{z_safe}
       G90
       ### info printer status and save z_restore
        {% if printer['virtual_sdcard'].is_active != true %}        # {% if printer['idle_timeout'].state != "Printing" %}
           ### save variable z_safe to user variable z_restore
             SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=z_restore VALUE={z_safe}
        {% else %}
            SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=z_restore VALUE=0               
       {% endif %} 
     {% endif %}   
    
########### RESTORE_Z_HOP ############################## 

[gcode_macro RESTORE_Z_HOP]
description: restore z-hop 
gcode:
   #{action_respond_info(">>>>> run gcode_macro  RESTORE_Z_HOP")}
    {% set user_vars = printer["gcode_macro VARIABLE"] %}    
      {% if user_vars.z_restore != 0 %}
           G91
           G1 Z-{user_vars.z_restore}
           G90
      {% else %}   
       #  {% if printer["gcode_macro VARIABLE"].dual_extruder_mode == 5 %} 
       #      REGENERATION_TOWER
       #  {% endif %}      
     {% endif %}

########### CHANGE_CARRIAGE ##############################

[gcode_macro CHANGE_CARRIAGE]
description: Change the new carriage.
gcode:

  #{action_respond_info(">>>>> run gcode_macro  CHANGE_CARRIAGE")}
      ### params.C = [0|1|] 
      
  # default_carriage_tool : { 0: ['extruder'],             1: ['extruder1'] }  
  # default_carriage_tool : { 0: ['extruder','extruder1'], 1: ['extruder2'] }  
  # default_carriage_tool : { 0: ['extruder','extruder1'], 1: ['extruder2','extruder3'] } 
  # default_carriage_tool : { 0: ['extruder','extruder2'], 1: ['extruder1','extruder3'] }  
 
      {% set user_vars = printer["gcode_macro VARIABLE"] %}    
      {% set carriage = params.C|default(user_vars.active_carriage)|int %}  
          
      ### read first tool for carriage      
         {% set tool_name =  user_vars.default_carriage_tool[carriage][0]  %}  
      ### set nr. first tool                   
         {% set tool_nr = tool_name.lstrip("extruder")|int if tool_name.lstrip("extruder")|length != 0 else 0 %}   
         
  #{action_respond_info("target carriage= %s \n offset= %s" % (carriage,tool_name))}

      ### set carriage offset   
       {% set offset =  user_vars.hotend_offset[tool_nr] %}      
 
       RESTORE_GCODE_STATE name=park_carriage  MOVE=1 MOVE_SPEED={user_vars.autopark_movespeed}
       SET_GCODE_OFFSET X={offset.x} Y={offset.y} Z={offset.z  + user_vars.print_offset_z} MOVE=1 MOVE_SPEED=500     # MOVE_SPEED={user_vars.autopark_movespeed}


############################################################

[gcode_macro SAVE_PRINT_OFFSET_Z]
gcode:
# {action_respond_info(">>>>> run gcode_macro  SAVE_PRINT_OFFSET_Z")}
      ### save actual print_offset_z variable for Tool 0
       {% set user_vars = printer["gcode_macro VARIABLE"] %} 
       {% if user_vars.active_tool == 0 %}  
          SET_GCODE_VARIABLE MACRO=VARIABLE VARIABLE=print_offset_z VALUE={printer.gcode_move.homing_origin.z} 
       {% endif %}  


    